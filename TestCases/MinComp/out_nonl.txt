
-------------------------------------------------------------------------
|    ___ _   _ ___                                                      |
|   / __| | | |_  )   Release 4.2.0  "Cardinal"                         |
|   \__ \ |_| |/ /                                                      |
|   |___/\___//___|   Suite (Computational Fluid Dynamics Code)         |
|                                                                       |
-------------------------------------------------------------------------
| SU2 Lead Dev.: Dr. Francisco Palacios, Francisco.D.Palacios@boeing.com|
|                Dr. Thomas D. Economon, economon@stanford.edu          |
-------------------------------------------------------------------------
| SU2 Developers:                                                       |
| - Prof. Juan J. Alonso's group at Stanford University.                |
| - Prof. Piero Colonna's group at Delft University of Technology.      |
| - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |
| - Prof. Alberto Guardone's group at Polytechnic University of Milan.  |
| - Prof. Rafael Palacios' group at Imperial College London.            |
-------------------------------------------------------------------------
| Copyright (C) 2012-2016 SU2, the open-source CFD code.                |
|                                                                       |
| SU2 is free software; you can redistribute it and/or                  |
| modify it under the terms of the GNU Lesser General Public            |
| License as published by the Free Software Foundation; either          |
| version 2.1 of the License, or (at your option) any later version.    |
|                                                                       |
| SU2 is distributed in the hope that it will be useful,                |
| but WITHOUT ANY WARRANTY; without even the implied warranty of        |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |
| Lesser General Public License for more details.                       |
|                                                                       |
| You should have received a copy of the GNU Lesser General Public      |
| License along with SU2. If not, see <http://www.gnu.org/licenses/>.   |
-------------------------------------------------------------------------

------------------------ Physical Case Definition -----------------------
Geometrically non-linear elasticity solver.
Compressible Neo-Hookean material model.
No restart solution, use the values at infinity (freestream).
Dimensional simulation.
The reference length/area (force coefficient) is 1.
The reference length (moment computation) is 1.
Reference origin (moment computation) is (1.23999e-316, 1.23728e-316, 1.23566e-316).
Surface(s) where the force coefficients are evaluated: Surface(s) plotted in the output file: 
Surface(s) belonging to the Fluid-Structure Interaction problem: 
Input mesh file name: meshBeam_2d.su2

---------------------- Space Numerical Integration ----------------------
Gradient Computation using weighted Least-Squares method.

---------------------- Time Numerical Integration -----------------------
Static structural analysis.
Euler implicit method for the flow equations.
A Conjugate Gradient method is used for solving the linear system.
Convergence criteria of the linear solver: 1e-08.
Max number of iterations: 1000.

------------------------- Convergence Criteria --------------------------
Maximum number of iterations: 1.
Reduce the density residual 3 orders of magnitude.
The minimum bound for the density residual is 10^(-8).
Start convergence criteria at iteration 5.

-------------------------- Output Information ---------------------------
Writing a flow solution every 1 iterations.
Writing the convergence history every 1 iterations.
The output file format is Paraview ASCII (.vtk).
Convergence history file name: history.
Forces breakdown file name: forces_breakdown.dat.
Surface structure coefficients file name: surface_structure.
Structure variables file name: beam.
Restart structure file name: restart_beam.dat.

------------------- Config File Boundary Information --------------------
Roller boundary marker(s): left, lowerright.
Load boundary marker(s) in cartesian coordinates: upperleft.

---------------------- Read Grid File Information -----------------------
Two dimensional problem.
689 points.
3 surface markers.
12 boundary elements in index 0 (Marker = left).
1 boundary elements in index 1 (Marker = upperleft).
1 boundary elements in index 2 (Marker = lowerright).
624 quadrilaterals.

------------------------- Geometry Preprocessing ------------------------
Setting point connectivity.
Renumbering points (Reverse Cuthill McKee Ordering).
Recomputing point connectivity.
Setting element connectivity.
Checking the numerical grid orientation.
Identifying edges and vertices.
Computing centers of gravity.
Setting the control volume structure.
Area of the computational grid: 624.
Searching for the closest normal neighbors to the surfaces.
Compute the surface curvature.
Max K: 1.41421. Mean K: 0.166378. Standard deviation K: 0.455645.
Checking for periodicity.
Computing wall distances.
Area projection in the y-plane = 0.

------------------------- Driver Preprocessing --------------------------
Instantiating a single zone driver for the problem. 

------------------------ Iteration Preprocessing ------------------------
Zone 1: FEM iteration.

------------------------- Solver Preprocessing --------------------------
Initialize Jacobian structure (Non-Linear Elasticity).

----------------- Integration and Numerics Preprocessing ----------------
Integration Preprocessing.
Numerics Preprocessing.

------------------------------ Begin Solver -----------------------------
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 

 IntIter ExtIter      Res[UTOL]      Res[RTOL]      Res[ETOL]   CFEM(Total)
       0       0       0.000000       0.000000       0.000000    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       1       0      -1.438657       0.404686      -1.715695    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       2       0      -1.707848      -0.654845      -3.267996    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       3       0      -3.515808      -1.116386      -4.669821    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       4       0      -3.253391      -1.863612      -5.969649    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       5       0      -4.586525      -2.435785      -7.212078    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       6       0      -4.645215      -3.068266      -8.424996    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       7       0      -5.584214      -3.654266      -9.623292    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       8       0      -5.935972      -4.254592     -10.814345    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
       9       0      -6.687143      -4.843143     -12.001702    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
      10       0      -7.171865      -5.434990     -13.187033    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
      11       0      -7.836570      -6.024188     -14.371154    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
      12       0      -8.380371      -6.613812     -15.554523    0.0000e+00
The direct solver runs a Conjugate Gradient linear solver with nPoint = 689
The discrete adjoint solver for this problem is Conjugate Gradient. 
Objective function: 3.111854759947e-01.
      13       0      -9.005228      -7.202705     -16.737256    5.5623e+03

-------------------------- File Output Summary --------------------------
Writing comma-separated values (CSV) surface files.
Merging connectivities in the Master node.
Merging coordinates in the Master node.
Merging solution in the Master node.
Writing SU2 native restart file.
Writing Paraview ASCII volume solution file.
-------------------------------------------------------------------------

History file closed.

------------------------- Solver Postprocessing -------------------------
Deleted CNumerics container.
Deleted CIntegration container.
Deleted CSolver container.
Deleted CIteration container.
Deleted CInterpolator container.
Deleted CTransfer container.
Deleted CDriver class.
Deleted CGeometry container.
Deleted CFreeFormDefBox class.
Deleted CSurfaceMovement class.
Deleted CVolumetricMovement class.
Deleted CConfig container.
Deleted COuput class.
-------------------------------------------------------------------------

Completed execution in 0.6012 seconds on 1 core.

------------------------- Exit Success (SU2_CFD) ------------------------

